import os
from dotenv import load_dotenv
import openai
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)

# Load API Key
load_dotenv()
API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = API_KEY

def get_conversation_openai(template, model="gpt-4o-mini", temperature=0.01, max_tokens=None, presence_penalty=0.0, frequency_penalty=0.0):
    """
    Interacts with the OpenAI model based on a provided template.
    
    Args:
        template (str): A string template for generating prompts dynamically.
        model (str, optional): The name of the OpenAI model to use. Defaults to "gpt-4o-mini".
        temperature (float, optional): Sampling temperature. Defaults to 0.1.
        max_tokens (int, optional): Maximum tokens for the response. Defaults to None.
        presence_penalty (float, optional): Presence penalty parameter for the model. Defaults to 0.0.
        frequency_penalty (float, optional): Frequency penalty parameter for the model. Defaults to 0.0.

    Returns:
        str: The content of the response generated by the OpenAI model.
    """

    try:
        # Call the OpenAI Chat API to generate a response
        response = openai.ChatCompletion.create(
            model=model,
            messages=[{"role": "system", "content": template}],
            temperature=temperature,
            max_tokens=max_tokens,
            presence_penalty=presence_penalty,
            frequency_penalty=frequency_penalty
        )

        # Log the API response
        # logging.info("API response: %s", response)

        # Extract and return the content of the response
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error("Error during API call: %s", e)
        return "Error generating response"

# prompt = "Create a registration API using FastAPI that allows users to register with their email and password. The API should store the user data in a database and return a success message upon successful registration. Ensure that the API is secure and follows best practices for user authentication."        

prompt = """Build an API using FastAPI for managing blog posts. Include endpoints to create, retrieve, update, and delete blog 
posts. Support public and private visibility for posts, allowing only authenticated users to access private posts.

"""


prompt_template = f"""
    You are a code genrator that generte a detailed and good quality code and the folder structure which we are using 
    is as follows:

    structure = [
    "project_root": [
        "app": [
            "api": [
                "__init__.py": None,
                "v1": [
                    "__init__.py": None,
                    "endpoints": [
                        "__init__.py": None,
                        "user.py": None,
                        "auth.py": None,
                        "other_endpoints.py": None,
                    ]
                ]
            ],
            "core": [
                "__init__.py": None,
                "config.py": None,
                "security.py": None,
                "dependencies.py": None,
            ],
            "models": [
                "__init__.py": None,
                "user.py": None,
                "other_models.py": None,
            ],
            "schemas": [
                "__init__.py": None,
                "user.py": None,
                "other_schemas.py": None,
            ],
            "crud": [
                "__init__.py": None,
                "user.py": None,
                "other_crud.py": None,
            ],
            "db": [
                "__init__.py": None,
                "base.py": None,
                "session.py": None,
                "migrations": "(Generated by Alembic)"
            ],
            "tests": [
                "__init__.py": None,
                "test_api": [
                    "__init__.py": None,
                    "test_user.py": None,
                    "test_auth.py": None,
                ]
            ],
            "main.py": None,
        ],
        "scripts": [
            "create_superuser.py": None,
            "initialize_db.py": None,
        ],
        "requirements.txt": None,
        ".env": None,
        ".env.example": None,
        "Dockerfile": None,
        "docker-compose.yml": None,
        "README.md": None,
        ".gitignore": None,
    ]]
    
    Write a detailed and good quality code for the below input:

    {prompt}

    Remember to add path before the  code snnipet. 
    For example:
        ```python
        # project_root/app/schemas/user.py

        from pydantic import BaseModel

        class UserLogin(BaseModel):
            username: str
            password: str

        class UserResponse(BaseModel):
            access_token: str
            token_type: str
        ```
    
    Remember do not generate any unnecessary text or explanation. only generate detailed and good quality code. Also give the text which is 
    necessary for the other files like requirements.txt, Dockerfile, docker-compose.yml, README.md, .gitignore etc.
    """
ans = get_conversation_openai(template = prompt_template)

print(ans)
