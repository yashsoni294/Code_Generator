import os
from dotenv import load_dotenv
import openai

# Load API Key
load_dotenv()
API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = API_KEY

def get_conversation_openai(template, model="gpt-4o-mini", temperature=0.01, max_tokens=None, presence_penalty=0.0, frequency_penalty=0.0):
    """
    Interacts with the OpenAI model based on a provided template.
    
    Args:
        template (str): A string template for generating prompts dynamically.
        model (str, optional): The name of the OpenAI model to use. Defaults to "gpt-4o-mini".
        temperature (float, optional): Sampling temperature. Defaults to 0.1.
        max_tokens (int, optional): Maximum tokens for the response. Defaults to None.
        presence_penalty (float, optional): Presence penalty parameter for the model. Defaults to 0.0.
        frequency_penalty (float, optional): Frequency penalty parameter for the model. Defaults to 0.0.

    Returns:
        str: The content of the response generated by the OpenAI model.
    """

    try:
        # Call the OpenAI Chat API to generate a response
        response = openai.ChatCompletion.create(
            model=model,
            messages=[{"role": "system", "content": template}],
            temperature=temperature,
            max_tokens=max_tokens,
            presence_penalty=presence_penalty,
            frequency_penalty=frequency_penalty
        )

        # Log the API response

        # Extract and return the content of the response
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return "Error generating response"

# prompt = "Create a registration API using FastAPI that allows users to register with their email and password. The API should store the user data in a database and return a success message upon successful registration. Ensure that the API is secure and follows best practices for user authentication."        

prompt = """ 
Signup (parent and child)	Done	As a user, I want to  sign-up as parent or child so that I can create my credentials and gain access to the platform based on my user role.	1. User click on sign-up button with different options for parent and child
2. User is redirected to registration page
3. Once all required fields are filled and validated, clicking the 'Submit' or 'Sign-Up' button should register the user.
4. User can now login with created credentials
Login (parent and child)	Done	As a user, I want to login as parent and child so that user I can gain access platform based on my user role.	1. User click on login button with different options for parent and child
2. User is able to login the platform with existing credentials
3. Incorrect login attempts for either parent or child should display appropriate error messages.
3. User views the home screen
Forgot passcode	Done	As a user, I want to click on "Forgot Password" option to reset my password in case I forget it so that I can change my password and log in with a new password thereafter	1. User clicks on "Forgot Password"
2. Clicking on 'Forgot Password' should redirect the user to a password reset page/form
3. User is able to change existing password
4.. User is able to login with new password
Reset Password	Done	As a user, I want to click on "Reset Password" to reset my password at will so that I can login with new password thereafter.	1. User clicks on "Reset Password"
2. User is able to change existing password
3. User is able to login with new password
"""


prompt_template = f"""
    Whart should be the API contract for the following prompt:
    {prompt}
"""

api_contract = get_conversation_openai(template = prompt_template)

print(api_contract)

# Specify the file name
file_name = "gen_api_contract.txt"  # Ensure you have permissions to write to the root folder
full_path = os.path.abspath(file_name)
# Write the string to the file
try:
    with open(full_path, "w") as file:
        file.write(api_contract)
    print(f"API contract successfully written to {full_path}")
except PermissionError:
    print("Permission denied: You need elevated privileges to write to the root folder.")
except Exception as e:
    print(f"An error occurred: {e}")
