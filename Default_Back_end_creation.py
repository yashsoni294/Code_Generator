import os

structure = {
    "project_root": {
        "app": {
            "api": {
                "__init__.py": None,
                "v1": {
                    "__init__.py": None,
                    "endpoints": {
                        "__init__.py": None,
                        "user.py": None,
                        "auth.py": None,
                        "other_endpoints.py": None,
                    }
                }
            },
            "core": {
                "__init__.py": None,
                "config.py": None,
                "security.py": None,
                "dependencies.py": None,
            },
            "models": {
                "__init__.py": None,
                "user.py": None,
                "other_models.py": None,
            },
            "schemas": {
                "__init__.py": None,
                "user.py": None,
                "other_schemas.py": None,
            },
            "crud": {
                "__init__.py": None,
                "user.py": None,
                "other_crud.py": None,
            },
            "db": {
                "__init__.py": None,
                "base.py": None,
                "session.py": None,
                "migrations": "(Generated by Alembic)"
            },
            "tests": {
                "__init__.py": None,
                "test_api": {
                    "__init__.py": None,
                    "test_user.py": None,
                    "test_auth.py": None,
                }
            },
            "main.py": None,
        },
        "scripts": {
            "create_superuser.py": None,
            "initialize_db.py": None,
        },
        "requirements.txt": None,
        ".env": None,
        ".env.example": None,
        "Dockerfile": None,
        "docker-compose.yml": None,
        "README.md": None,
        ".gitignore": None,
    }
}

def create_structure(base_path, structure):
    for folder, contents in structure.items():
        if contents is not None:
            folder_path = os.path.join(base_path, folder)
            os.makedirs(folder_path, exist_ok=True)
            
            if isinstance(contents, dict):
                # If contents is a dictionary, recurse into it
                create_structure(folder_path, contents)
            elif isinstance(contents, list):
                # If contents is a list, create files
                for file in contents:
                    file_path = os.path.join(folder_path, file)
                    try:
                        with open(file_path, 'w') as f:
                            f.write(f"# {file_path}")
                    except PermissionError as e:
                        print(f"PermissionError: Could not write to {file_path}. {e}")
                    except Exception as e:
                        print(f"Error: {e}")
        else:
            file_path = os.path.join(base_path, folder)
            try:
                with open(file_path, 'w') as f:
                    f.write(f"# {file_path}")
            except PermissionError as e:
                print(f"PermissionError: Could not write to {file_path}. {e}")
            except Exception as e:
                print(f"Error: {e}")


# Set the base directory where the folder structure will be created
path = input("Enter the path where you want to create the folder structure: ")
base_path = path  # Change this to the desired base path

# Create the folder structure
create_structure(base_path, structure)

print(f"Folder structure created at {os.path.abspath(base_path)}")
